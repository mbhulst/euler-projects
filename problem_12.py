# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

number = 0
num_divisors = 500
triangle_number = 0
divisors = 0

# find a list of triangle numbers
while divisors < num_divisors:
    number += 1
    triangle_number += number

# check the number of divisors of each triangle number
    divisors = 0
    sqrt_triangle_number = int(triangle_number ** 0.5)
    for possible_divisor in range(1, sqrt_triangle_number + 1):
        if triangle_number % possible_divisor == 0:
            divisors += 1
    divisors *= 2
    if sqrt_triangle_number ** 2 == triangle_number:
        divisors -= 1

# print during loop
    print(triangle_number, " : ", divisors)

print("The first triangle number to have over {} divisors is {}." .format(num_divisors, triangle_number))
